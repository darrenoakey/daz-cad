"""Integration tests for LLM functionality.

These tests verify that the LLM integration works correctly and that 
the correct dazllm API methods are being called.
"""

import unittest

from pydantic import BaseModel, Field

try:
    from .llm_client import get_llm
    from .llm_git_utils import generate_git_commit_message
    from .llm_code_improvement import improve_code_with_llm
except ImportError:
    from llm_client import get_llm
    from llm_git_utils import generate_git_commit_message
    from llm_code_improvement import improve_code_with_llm


class SimpleTestResponse(BaseModel):
    """Simple test response model for structured chat testing."""
    answer: str = Field(description="A simple one-word answer")
    number: int = Field(description="A simple number")


class TestLlmIntegration(unittest.TestCase):
    """Integration tests for LLM functionality."""

    def test_llm_client_has_correct_methods(self):
        """Test that LLM client has the correct dazllm API methods."""
        llm = get_llm()
        self.assertIsNotNone(llm, "LLM should always be available")
        
        # Check that the LLM has the correct method names from dazllm API
        self.assertTrue(hasattr(llm, 'chat'), 
                      "LLM should have 'chat' method from dazllm API")
        
        self.assertTrue(hasattr(llm, 'chat_structured'), 
                      "LLM should have 'chat_structured' method from dazllm API")
        
        # Make sure it doesn't have the incorrect 'invoke' method
        self.assertFalse(hasattr(llm, 'invoke'), 
                       "LLM should NOT have 'invoke' method - use 'chat' instead")

    def test_llm_chat_structured_method_works(self):
        """Test that LLM chat_structured method works correctly."""
        llm = get_llm()
        self.assertIsNotNone(llm, "LLM should always be available")
        
        try:
            # Test the chat_structured method with a simple prompt
            response = llm.chat_structured(
                "Respond with the word 'test' and the number 42", 
                SimpleTestResponse
            )
            
            # Response should be an instance of our model
            self.assertIsInstance(response, SimpleTestResponse)
            self.assertIsInstance(response.answer, str)
            self.assertIsInstance(response.number, int)
            self.assertGreater(len(response.answer.strip()), 0)
            
        except Exception as e:
            # If there's an error, it shouldn't be about missing 'chat_structured' method
            error_msg = str(e).lower()
            self.assertNotIn("has no attribute 'chat_structured'", error_msg,
                           "LLM should have 'chat_structured' method")
            # Re-raise the exception if it's something else
            if "'chat_structured'" in error_msg:
                raise

    def test_git_commit_generation_uses_structured_api(self):
        """Test that git commit generation uses structured LLM API."""
        # This should not raise an AttributeError about missing methods
        try:
            result = generate_git_commit_message("Test action", "test code")
            self.assertIsInstance(result, str)
            self.assertGreater(len(result), 0)
        except AttributeError as e:
            error_msg = str(e)
            self.assertNotIn("'invoke'", error_msg,
                           "Should use structured methods, not 'invoke'")
            # Re-raise if it's a different AttributeError
            raise

    def test_code_improvement_uses_structured_api(self):
        """Test that code improvement uses structured LLM API."""
        def simple_runner(code):
            return {"success": True, "objects": []}
        
        # This should not raise an AttributeError about missing methods
        try:
            result = improve_code_with_llm(
                "make it red",
                "box = cq.Workplane().box(1,1,1)",
                simple_runner
            )
            self.assertIsInstance(result, dict)
            self.assertIn("success", result)
        except AttributeError as e:
            error_msg = str(e)
            self.assertNotIn("'invoke'", error_msg,
                           "Should use structured methods, not 'invoke'")
            # Re-raise if it's a different AttributeError
            raise

    def test_dazllm_api_methods_available(self):
        """Test that dazllm API methods are correctly available."""
        try:
            # Try importing dazllm to check available methods
            import dazllm  # pylint: disable=import-outside-toplevel
            
            # Check that Llm class exists and has required methods
            if hasattr(dazllm, 'Llm'):
                llm_class = dazllm.Llm
                # Create a test instance to check methods
                test_llm = llm_class("test:model")
                self.assertTrue(hasattr(test_llm, 'chat'),
                              "dazllm.Llm should have 'chat' method")
                self.assertTrue(hasattr(test_llm, 'chat_structured'),
                              "dazllm.Llm should have 'chat_structured' method")
            
        except ImportError:
            # dazllm not available, skip this test
            self.skipTest("dazllm not available")
        except Exception:
            # Other errors are OK for this test
            pass

    def test_real_llm_structured_call(self):
        """Test making a real LLM structured call."""
        llm = get_llm()
        self.assertIsNotNone(llm, "LLM should always be available")
        
        try:
            # Make a real structured call to test the API
            response = llm.chat_structured(
                "Respond with the answer 'hello' and the number 5", 
                SimpleTestResponse
            )
            
            # Verify we get a structured response
            self.assertIsInstance(response, SimpleTestResponse)
            self.assertIsInstance(response.answer, str)
            self.assertIsInstance(response.number, int)
            self.assertGreater(len(response.answer), 0)
            
        except Exception as e:
            # Check that the error is not about missing methods
            error_msg = str(e).lower()
            self.assertNotIn("has no attribute 'chat_structured'", error_msg,
                           "LLM should have 'chat_structured' method from dazllm")
            
            # For other errors, just log them but don't fail the test
            print(f"LLM structured call failed (this may be expected): {e}")
